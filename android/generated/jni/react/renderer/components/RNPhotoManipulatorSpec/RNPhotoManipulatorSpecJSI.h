/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeRNPhotoManipulatorCxxSpecJSI : public TurboModule {
protected:
  NativeRNPhotoManipulatorCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value batch(jsi::Runtime &rt, jsi::String image, jsi::Array operations, jsi::Object cropRegion, std::optional<jsi::Object> targetSize, std::optional<double> quality, std::optional<jsi::String> mimeType) = 0;
  virtual jsi::Value crop(jsi::Runtime &rt, jsi::String image, jsi::Object cropRegion, std::optional<jsi::Object> targetSize, std::optional<jsi::String> mimeType) = 0;
  virtual jsi::Value flipImage(jsi::Runtime &rt, jsi::String image, jsi::String mode, std::optional<jsi::String> mimeType) = 0;
  virtual jsi::Value rotateImage(jsi::Runtime &rt, jsi::String image, jsi::String mode, std::optional<jsi::String> mimeType) = 0;
  virtual jsi::Value overlayImage(jsi::Runtime &rt, jsi::String image, jsi::String overlay, jsi::Object position, std::optional<jsi::String> mimeType) = 0;
  virtual jsi::Value printText(jsi::Runtime &rt, jsi::String image, jsi::Array texts, std::optional<jsi::String> mimeType) = 0;
  virtual jsi::Value optimize(jsi::Runtime &rt, jsi::String image, double quality) = 0;

};

template <typename T>
class JSI_EXPORT NativeRNPhotoManipulatorCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "RNPhotoManipulator";

protected:
  NativeRNPhotoManipulatorCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeRNPhotoManipulatorCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeRNPhotoManipulatorCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeRNPhotoManipulatorCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value batch(jsi::Runtime &rt, jsi::String image, jsi::Array operations, jsi::Object cropRegion, std::optional<jsi::Object> targetSize, std::optional<double> quality, std::optional<jsi::String> mimeType) override {
      static_assert(
          bridging::getParameterCount(&T::batch) == 7,
          "Expected batch(...) to have 7 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::batch, jsInvoker_, instance_, std::move(image), std::move(operations), std::move(cropRegion), std::move(targetSize), std::move(quality), std::move(mimeType));
    }
    jsi::Value crop(jsi::Runtime &rt, jsi::String image, jsi::Object cropRegion, std::optional<jsi::Object> targetSize, std::optional<jsi::String> mimeType) override {
      static_assert(
          bridging::getParameterCount(&T::crop) == 5,
          "Expected crop(...) to have 5 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::crop, jsInvoker_, instance_, std::move(image), std::move(cropRegion), std::move(targetSize), std::move(mimeType));
    }
    jsi::Value flipImage(jsi::Runtime &rt, jsi::String image, jsi::String mode, std::optional<jsi::String> mimeType) override {
      static_assert(
          bridging::getParameterCount(&T::flipImage) == 4,
          "Expected flipImage(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::flipImage, jsInvoker_, instance_, std::move(image), std::move(mode), std::move(mimeType));
    }
    jsi::Value rotateImage(jsi::Runtime &rt, jsi::String image, jsi::String mode, std::optional<jsi::String> mimeType) override {
      static_assert(
          bridging::getParameterCount(&T::rotateImage) == 4,
          "Expected rotateImage(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::rotateImage, jsInvoker_, instance_, std::move(image), std::move(mode), std::move(mimeType));
    }
    jsi::Value overlayImage(jsi::Runtime &rt, jsi::String image, jsi::String overlay, jsi::Object position, std::optional<jsi::String> mimeType) override {
      static_assert(
          bridging::getParameterCount(&T::overlayImage) == 5,
          "Expected overlayImage(...) to have 5 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::overlayImage, jsInvoker_, instance_, std::move(image), std::move(overlay), std::move(position), std::move(mimeType));
    }
    jsi::Value printText(jsi::Runtime &rt, jsi::String image, jsi::Array texts, std::optional<jsi::String> mimeType) override {
      static_assert(
          bridging::getParameterCount(&T::printText) == 4,
          "Expected printText(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::printText, jsInvoker_, instance_, std::move(image), std::move(texts), std::move(mimeType));
    }
    jsi::Value optimize(jsi::Runtime &rt, jsi::String image, double quality) override {
      static_assert(
          bridging::getParameterCount(&T::optimize) == 3,
          "Expected optimize(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::optimize, jsInvoker_, instance_, std::move(image), std::move(quality));
    }

  private:
    friend class NativeRNPhotoManipulatorCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
